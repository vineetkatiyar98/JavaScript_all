1. Client Side 
==============
HTML
CSS
JS
JQUERY
BOOTSTRAP
React JS
Angular Js 
Vue JS
etc.
2. Server Side
===============
=>
C#
JAVA
PHP
Node jS
Express
Python
etc.
3. Database language

int a
float a
string a   =>Statically Typed || Strictly Typed
boolean a

a=10
a=20.6
a=true    => Loosely Typed  || Dynamically Typed
a='RAM'
===============================
alert()
=======

Way to write code of JavaScript
-------------------------------
1. Internal JavaScript
<script>
alert("Welcome to JavaScript")
</script>
2. External JS

console.log()=>
============
=>it is used to display output browser console.

<script>
console.log("Welcome to Techpile");
</script>
=============
var x   

ES6 let const 

ECMA is a standard to writing code.
=====================================
prompt()=>prompt function is used to take input on runtime.
=>prompt function is defined in window.
=>window object is primary object of javascript.
=>return type of prompt function is string.
Ok => return value
cancel => null
=================================
objectname.member

object=> object is the collection of property(variable) and methods (function).

variable,function => member of object

//var obj={key:value,key:value}

members of window object
------------------
prompt()
alert()
confirm()
location
open()
print()
play()
pause()
setInterval()
setTimeout()
clearInterval()
=============

setTimeout()
clearInterval()
etc.
-----------
Syntax
-------
window.prompt("FieldName","Placeholder");

var name=window.prompt("Name","Enter Your Name...")//10

==================================
getElementById()
getElementsByTagName()
getElementsByClassName()
querySelector()
querySelectorAll()
==================================
getElementById()
================
=>getElementById function is used to select html element on the basis of HTML Id.
=>getElementById function is defined in document object.
=>document object is the built-in object of DOM.
=>return type of getElementById function is current object.

Syntax
------
document.getElementById("IdOfHTMLElement")

Exa:
----
<h1 id="h">TECHPILE TECHNOLOGY</h1>
document.getElementById("h")

Step to apply CSS with JavaScript.
==================================
object.style.propertyName="value"

//document.getElementById("h").style.color="red"
var x=document.getElementById("h")
x.style.color="RED"
x.style.background="aqua"
x.style.borderRadius="10px"
======================================

value
======
=>value property is used to set/get value of selected form control.(input, textarea,button,select,datalist,etc.)
=>return type value property is string.
get
---
var x=HTMLOBJECT.value
var x=document.getElementById("idofFormControl").value//

Exa:
<input type="Text" id="txt"/>//TECHPILE
<input type="button" value="GET VALUE"/>


SET
---
objectname.value="RAM"
=================================
querySelector
==============
=>
querySelector is used to select first matches of element of given selector(ID,class,tag,group selector).
=> it is defined in document object.

Syntax
-------
document.querySelector("CSSSelector")
Exa:
<p>HTML</p>
<p>CSS</p>
<p>JS</p>
<input class="txt" type="text"/>
<input class="txt" type="text"/>


document.querySelector("p")  //First Para
document.querySelector(".txt")  //First input
document.querySelector(".txt").value  //First input

==========================
innerText
==========
<p id="p1">TECHPILE</p>
<p id="p2">HCL</p>
get
===
var x=document.querySelector("#p1").innerText
set
===
document.querySelector("#p2").innerText=x

<img src="a.jpg" id="img1"/>
<img src="b.jpg" id="img2"/>

confirm
-------
=>confirm box is used to take user confirmation. it has two buttons
cancel => false
ok  => true.
=>confirm is defined in window

Syntax
=======
window.confirm("Message")
confirm("Message")
======================
setInterval
===================
=>setInterval function is used to execute a group of statement for every given time interval.
=>setInterval function is defined in window.
Exa:
----
Syntax 1
window.setInterval(functionname,time in millisecond)
setInterval(functionname,time in millisecond)

setInterval("functionname()",time in millisecond)

function demo()
{
alert("OK")
}

window.setInterval("demo()",5000)
========================================
setTimeout()
===========
setTimeout function is used execute once a group of statement after given time interval.

window.setTimeout(functionname,time in millisecond)
setTimeout(functionname,time in millisecond)

setTimeout("functionname()",time in millisecond)

function demo()
{
alert("OK")
}
===============================
array in JavaScript
=====================

In JavaScript array is collection of heterogeneous data types element.

=>indexing of array is starts from 0 and last index is n-1 where n is length of array.

Syntax 1
=========
var arrayName=[item1,item2,item3......itemN]
Exa:
var EmpInfo=["RAM",30,20000.5,true]
How to access element of array
===========================
EmpInfo[0]//RAM
EmpInfo[1]//20
EmpInfo[2]//20000.5
EmpInfo[4]//true
EmpInfo[5]//undefined

===================================
Syntax 2
===================================
var arrName=new Array(item1,item2,item3,....itemN)

var courseList=new Array("HTML","CSS","JS","JQUERY")

<script>
var courseList=new Array("HTML","CSS","JS","JQUERY","BS","REACT JS","EJS")
for(var i=0;i<courseList.length;i++)
{
alert(courseList[i])
}

==========================
for ...in loop
for..of loop

var arrName=new Array(item1,item2,item3,....itemN)

alert("ok")

If we want to execute a group of statement for every element present in given collection then we have to for.. in or for ..of loop.
============
for..of loop
============
Syntax
======
name="RAM"
for(var variable of collection)
{
statement
statement
statement
statement
}








</script>


=======================
Function in JavaScript
=======================
=>Function is block of re-usable code which used to perform particular task.
=>The block of code will be executed when user calls(invoke) it.

Type Of Function
=================
1. Built-in Function | Pre-defined Function
=================
The function which are defined in system client are known as Built-in Function.

Exa:
----
setInterval
setTimeout
alert()
prompt()
write()
etc.

2. User Defined Function (UDF)
=>The functions which are defined by user based on our business requirement are known as UDF.

Syntax
======
function functionname()
{
statement
statement
statement
}

Calling of Function
===================
functionname()  //Onload   => Onload="functionname()" 

In JavaScript multiple events are used to handle calling of function.

onclick event
ondblclick
onchange
onfocus
onblur
onmouserover
onmouseleave
onkeypress
onkeyup
etc.

ES6 =>2015 
==========
Arrow function In ES6

var demo=()=>  //Arrow function  Without parameter
{
statement
statement
statement
}

Function with Parameter
=======================
Exa:
function demo(param1,param2,...paramN)
{
statement
statement
statement
}

Parameter
=========
=>Parameter provides input to the function. 
=>At time of calling of function compulsory we have to provide value to that parameter otherwise we will get error.

function demo(x,y)   //x,y are formal argument
{
alert(`Sum is : ${x+y}`)
}

demo(10,30)// 10,30 are actual argument

Arrow function with parameter
=============================
let demo=(x,y)=>   //x,y are formal argument
{
alert(`Sum is : ${x+y}`)
}

demo(10,30)// 10,30 are actual argument
 
==============================
Function with Default Parameter
==============================
let demo=(x=20,y=30)=>   //x,y are formal argument
{
alert(`Sum is : ${x+y}`)
}

demo()

let demo=(...x)=>     //...x rest operator
{
alert(x)
}

demo(10)  // x=[10]
demo(20,30)// x=[20,30]
demo(20,30,30)//x=[20,30,30]
demo(20,30,40,50)//x=[20,30,40,50]
demo(20,30,40,50,60)// x=[20,30,40,50,60]


function demo(x,y,...z)
{
alert(x)
alert(y)
alert(z)
}
demo(10,20,30)
demo(10,20,30,40)
demo(10,20,30,40,50)
======================================
this
==>
this keyword is used to select current object of HTML element.

======================================
Anonymous Function
====================================
The function which have no any name is known as anonymous function

Syntax
======
function()
{
statement
statement
statement
statement
}

callback => function  within function

========================
function demo()
{
alert("ok")
}

setInterval(demo,1000)

window.setInterval(function(){
alert("OK")
},5000)


Anonymous arrow function
=========================
function()
{
statement
statement
statement
}

()=>
{
statement
statement
statement
}

window.setInterval(()=>{
alert("OK")
},5000)

forEach()
========
=>forEach function is used to execute a group of statement for every element present in array.
=>forEach will not execute if array is empty.

Syntax
=======
arr=["HTML","CSS","JS","JQUERY"]
arrayName.forEach(functionName)

function functionName(current,index,arrName)
{
statement
}

anonymous function 
==================
arr.forEach(function(data,i,arr){
statement
statement
})
arr=["HTML","CSS","JS","JQUERY"]
arr.forEach((data,i,arr)=>{

})

Date object
===========
=>Date is object providing some methods related date and time.
Syntax
======
var d=new Date()
d.getHours() => 1-24
d.getMinutes() => 1-60
d.getSeconds()  =1-60
d.getMilliseconds() => 0-999
d.getDate()  => 5
d.getMonth() 0-11  
d.getFullYear()    2022
d.getDay()   0-6
d.toLocaleTimeString()  =>11:40 AM/PM
d.toLocaleDateString() =>  mm/dd/yyyy  => 12/5/2022
etc..

clearInterval()
===============
clearInterval function is used to stop functionality of setInterval.

function demo()
{
statement
}

var a=window.setInterval(demo,1000)

window.clearInerval(a)
=========================================
HTMLCollection=>HTMLCollection is just like array but element of HTMLCollection can be access by index only.

item
length
namedItem("abc")  => id=abc

NodeList
=========
NodeList is just like HTMLCollection but it's has own function like entries,values,forEach,key,item.

getElementsByClassName
======================
getElementsByClassName is used to return HTMLCollection with specified className.

<p class="abc">PARA1</p>
<p id="a" class="abc">PARA2</p>
<p class="abc">PARA3</p>
<p class="abc">PARA4</p>

var x=document.getElementsByClassName("abc")

getElementsByTagName()
======================
getElementsByTagName function is used to return HTMLCollection with specified tagName.


<p class="abc">PARA1</p>
<p id="a" class="abc">PARA2</p>
<p class="abc">PARA3</p>
<p id="box" class="abc">PARA4</p>

var x=document.getElementsByTagName("p")// x=object HTMLCollection
var x=document.getElementsByTagName("p").namedItem("box").innerText

alert(x)//PARA4

=========================
document.title
document.images    =>HTMLCollection
document.head
document.body

=====================
location
=========
location property is used to redirect location.
=>location is defined in window
window.location="https://techpile.in/st"

open()
======
open function is used to open URL on new tab or new window.

window.open("url","_blank","height=value,width=value")

exa:
window.open("https://www.techpile.in","_blank","height=600,width=400")
==============================
print()
============================
querySelectorAll()
==================
=>querySelectorAll return nodeList with specified selector Name.

<p>HTML</p>
<p id="b">CSS</p>
<p class="a">JS</p>
<p class="a">JQUERY</p>

document.querySelectorAll("p")
document.querySelectorAll("#b")
document.querySelectorAll(".a")
=================================
var x=document.querySelectorAll("p") //nodeList

getElementsByName
=================
=>getElementsByName is used to return NodeList with specified name

<p name="a">PARA1</p>
<p name="b">PARA1</p>
<p name="a">PARA1</p>
<p name="a">PARA1</p>
<p name="b">PARA1</p>

document.getElementsByName("a")// p1,p3,p4 

==================================
setAttribute
============
setAttribute function is used to set attribute of selected HTML Element.

Syntax
======
var element=document.querySelector("selector")
element.setAttribute("attributename","value")

getAttribute()
=============
it is used to get attribute value of selected HTML element.

<img src="images/a.jpg"/>
var x=document.querySelector("img").getAttribute("src")


x=images/a.jpg

============================
hasAttribute
=============
it returns true if specified attribute exist on selected HTML element otherwise it returns false..

<h2 id="box">HTML</h2>
<script>
document.querySelector("h2").hasAttribute("class")//false
document.querySelector("h2").hasAttribute("id")//true
</script>

hasAttributes
==============
=>It returns false if selected HTML element have no attribute otherwise it returns true.

var x=document.querySelector("h2").hasAttributes()//false
alert(x)

Math
=====
=>Math is a object providing some property(variable) and method(function) related to mathematical operation.

CONSTANT VALUE
--------------
PI
LN2  => natural logarithm of 2 base e   
LN10  => natural logarithm of 10 base e
------
random()  =>
=======
=>random function is used to return random number between 0(including) to 1 (excluding)
floor()
ceil()
round()
min()   min(1,24,5,6,3,2,4)// 1
max()    
sqrt()   sqrt(16)  =4 negative not acceptable 
cbrt()   cbrt(27)  => 3 negative acceptable
random()  0-.99999
pow(x,y)  => x to the y  pow(2,3) => 2*2*2 =>8
log(10) it is used to find logarithm value given value base on e. 
etc.

Math.random() // 0,.5,    .999999  

alert(Math.random())

12.7  =>
1.1  floor  1
1.1  ceil  2
1.9  ceil  2
1.8  ceil  2
1.1  ceil  2
1.3  round  1
1.4  round  1
1.6  round  2
1.5  round  2


3.6   ceil  4 floor  3 round 4


Math.random()  =>0  -.99999
Math.random()*10  =>0  - 9.99999   =>5.45 
Math.floor(Math.random()*10)
Math.floor(Math.random()*10)  =>0  - 9   =>5 
Math.random()  => 0 -.999 =>
Math.random()*11  => 0 -.999 =>0 - 10.89
Math.floor(Math.random()*11) =>0 - 10
============================
Math.random()*50  => 0   =49.95
Math.floor(Math.random()*50)  => 0   =49
Math.floor(Math.random()*50)  => 0   =49

Math.random() => 0 - .99
Math.random()*10 => 0 - 9.9999Math
Math.floor(Math.random()*10) => 0 - 9
Math.floor(Math.random()*10)+5 => 5 -14
=============================
floor()
======
=>floor function i used to return lowest integer value of given decimal value.

x=12.543434
Math.floor(x) //12


var str="Techpile"  str[8]//undefined
var str="Techpile"  str[3]//h

===============================
trim()
=====
=>trim function is used to remove both side white space.

var str=" techpile "
var str1="techpile"
str==str1=> false

var str=str.trim()  =>" techpile " =>"techpile"

str==str1  => true
==============================

"30"==30  =>true  
"30"===30 =>false 

================ 
addEventListener()
================
=>it is used to add event to the selected HTML element.
=>it does not override old event.

var element=document.querySelector("button")

element.addEventListener(Event,functionName,useCapture)

Event =>click,mouseover,dblclick 
function=>
useCapture (optional) => bubbling => false  By default 
			capturing   =>true
var element=document.querySelector("button")
element.addEventListener("click",demo)

function demo()
{
alert("ok")
}

contextmenu
============
contextmenu event executed when user right click on window.

preventDefault()
================
=>preventDefault method is used to prevent(stop) default action.

event.preventDefault()


window.addEventListener("contextmenu",function(){
alert("Sorry ! right click disabled here..")
event.preventDefault()
})

copy event
===========
copy event executed when user select copy option  with keyboard/mouse.

window.addEventListener("copy",function(){
alert("OK")
})

cut event
===========
cut event executed when user select cut option  with keyboard/mouse.

window.addEventListener("cut",function(){
alert("OK")
})




function demo(x,y)
{
var res=x+y
alert(res)
}
==========================
String in JS
===========================
=>In JavaScript string is collection character enclosed with single or double or backtique.

"RAM"
'RAM'
`RAM`

Functions of String in JavaScript
=================================
slice
=====
=>slice function is used return a part of string based on start and end index.
=>Here negative index is acceptable.
Syntax
=======
var str="TECHPILE TECHNOLOGY"
str.slice(startIndex,endIndex)  //not encluding endIndex
Exa:  
str.slice(2,5)//CHP  length=end-start 3
str.slice(0,10)//TECHPILE T length=end-start 3
str.slice(-10,-5)//TECHN -5-(-10)  //5
str.slice(-10)//TECHNOLOGY
str.slice(2)//CHPILE TECHNOLOGY

str.substring(start,end)// TECH
str.substring(0,4)// TECH
str.substr(start,length)
str.substr(1,5) starts from 1 index and cut 5 char

substring
==========
=>substring function is used return a part of string based on start and end index.
=>Here negative index is not acceptable.
Syntax
======
var str="TECHPILE TECHNOLOGY"
str.substring(startIndex,endIndex)
str.substring(2,5)//CHP  length=end-start 3
str.substring(0,10)//TECHPILE T length=end-start 3
str.substring(2)//CHPILE TECHNOLOGY


substr
=======
ssubstr function is used to return a part of string of given string based on start and length.

Syntax
=======
string.substr(startIndex,length)

startIndex can be negative but length can't possible.

var str="MOHAN"
alert(str.substr(1,3))//OHA
alert(str.substring(1,3))//OH
alert(str.slice(1,3))//OH

==================================
charAt
charAt function ia used to return character at specified index.
=>index can not be negative or greater than or equal to length of string.
==================================

var str="TECHPILE TECHNOLOGY"
alert(str[0])//T
alert(str[1])//E
alert(str.charAt(0))//T
alert(str.charAt(1))//T
alert(str.charAt(str.length-1))//Y
alert(str.charAt(str.length-2))//G


charCodeAt
indexOf
lastIndexOf
toUpperCase => to convert string into uppercase letter.

Syntax
-------
var str="Techpile"
str=str.toUpperCase()
document.write(str)//TECHPILE

toLowerCase => to convert string into lower case letter.

Syntax
-------
var str="Techpile"
str=str.toLowerCase()
document.write(str)//techpile

trim
====
=>trim function is used to remove both side white space.

var str="  Techpile  "
document.write(str.length)//12
str=str.trim()
document.write(str.length)//8
document.write(str)//Techpile



trimStart
=>to remove left side white space of a string.

var str="  Techpile  "
document.write(str.length)//12
str=str.trimStart()
document.write(str.length)//10
document.write(str)//"Techpile  "

trimEnd
=>to remove right side white space of a string.

var str="  Techpile  "
document.write(str.length)//12
str=str.trimStart()
document.write(str.length)//10
document.write(str)//"  Techpile"


padStart
=>padStart function is used to add content at beginning position of given string.

Syntax
======
var str="RAM"
str.padStart(length,"content")
length=> length of string after content added.
var x=str.padStart(12,"SHYAM")

padEnd
=======
=>padEnd function is used to add content at the last position of a string.

var str="RAM"
str.padEnd(length,"content")
length=> length of string after content added.
var x=str.padEnd(5,"x")// RAMxx


replace
========
=>replace function is used to replace a part of string with new string.
=>By default it replace first matches element with new string.
=> if we want to replace all matches of string then we have to use global flag with regular expression.
=>it does not update original string.

Syntax
------
var str="Techpile Technology"
str.replace(oldString,newString)

//str.replace("tech","XYZ")
//document.write(str)//Techpile Technology
//str.replace("Tech","XYZ")//XYZpile Technology
str.replace(/Tech/g,"abc")// abcpile abcnology
str.replace(/tech/g,"abc")//Techpile Technology
str.replace(/tech/i,"abc")//abcpile Technology
str.replace(/tech/gi,"abc")//abcpile abcnology

=>
replaceAll()
============
=>replaceAll function is used to replace all matches of given string  with new string.
=>if we want to use regular expression in replaceAll then compulsory we have to global flag(g).

var str="Techpile technology"
var x=str.replaceAll("Tech","abc")//

concat
======
=>concat function is used to merge multiple string in one string.

var str1="Techpile"
var str2="Technology"
var str3="Pvt Ltd."
var newString=str1.concat(str2,str3)

match
======
=>match function is used to match a part of string in main string and return first element.
=>if searches element is not present  in main string then it return null.

<script>
var str="Techpile Technology Pvt. ltd."
//var x=str.match("tech")
var x=str.match(/tech/)//null
var x=str.match(/tech/i)//Tech
var x=str.match(/tech/ig)//Tech,Tech
document.write(x)
</script>
=============================
include
=======
=>includes function is used ti check whether given string present in main string or not.
=>it returns true if given string is present in main string otherwise it returns false. 

var str="techpile Technology pvt. ltd."

str.includes("Tech")//true
str.includes("O")//false
str.includes("ltd")//true

split
=====
=>split function is used to split a string into array based on separator.

Syntax
======
str.split(separator)

var str="Techpile Technology Pvt. Ltd."
var arr=str.split(" ")//
document.write(arr)//["Techpile","Technology" "Pvt.","Ltd."]

==========
var d="20/12/2022" n //2022-12-20
var arr=d.split("/")//["20","12","2022"]
var d1=arr[2]+"-"+arr[1]+"-"+arr[0]
document.write(d1)

startsWith()
==========
=>startsWith is used to check whether main string starts with given string or not.

=>it return true if main string starts with given string otherwise it returns false.

var str="Techpile Technology Pvt. Ltd."
var x=str.startsWith("Tech")//true
var x=str.startsWith("ZYZ")//false

Array Functions
----------------
push()
=====
=>push function is used to add element at last index of array and return length of updated array.
=> it updates original array.

Exa:
====
var arr=["RAM","MOHAN","SOHAN"]
var x=arr.push("TECHPILE")//4

filter()
========
filter function is used to filter items of array and return new Array based on some condition.
=>filter function is not applicable for empty array.

Syntax
=======
arr.filter(function)

function(currentItem,index,arr)
here index and arr is optional parameter
map()
====
if we want to add some functionality to every  elements of an array and generate new array the we have to map function.
=>map function is not applicable for empty array.
=>it does not update original array.

Syntax
======
arr.map(function)

function(currentValue,index,arr)
=========================
var arr=[3,4,5,6,7,8,9,10]

Sample output= [3,6,9]=> [9,36,81]

pop()
=====
=>pop function is used to remove last element of an array and return removed element.

arr=["Ram","Mohan","Raj"]
alert(arr.pop())//Raj

var str="ab.c.jpg"
abcd.skff.png
ram.mohan.jpg
=============
str.slice(str.lastIndexOf('.')+1)//jpg

var str="abcd.skff.png"
str=str.split(".")//["abcd","skff","png"]
var ext=str.pop()//png

===============================
shift()
======
shift function is used remove first element of an array and return removed element.

var arr=[1,2,3,4,5,6]
var x=arr.shift()
alert(x)//1

unshift()
=========
unshift is used to add an element of array at beginning position.
=>it returns length of updated array.
var arr=[1,2,3,4,5,6]
var x=arr.unshift("12")
alert(x)//7
alert(arr)//12,1,2,3,4,5,6

delete
=======
delete property is used to delete value of an array without index.

var arr=["RAM","MOHAN","SOHAN"]
delete arr[1]
===================================
var str="TECHPILE TECHNOLOGY PVT LTD"
var arr=str.split(" ")//["TECHPILE","TECHNOLOGY","PVT",LTD]
var arr=str.split("P")//["TECH","ILE TECHNOLOGY ","VT LTD"]

var str=arr.join(" ")//TECHPILE TECHNOLOGY PVT LTD
var str=arr.join("P")//TECHPILE TECHNOLOGY PVT LTD

join()
======
join function is used to join elements of array on the basis separator and return new string.
=>it does not update original array.

var arr=["RAM","SHYAM","MOHAN"]
arr.join("||")// RAM||SHYAM||MOHAN
=============

every
=====
every function is used to check whether given condition satisfy all element of array or not

=>it returns true if all elements of array satisfy given condition otherwise it returns false.
 
syntax
=====
arr.every((data,index,arra)=>{
return condition
})
var arr=[10,12,13,14]
var x=arr.every((data)=>{
return data>13
})
x// false

var x=arr.every((data)=>{
return data>5
})
x//true


some
====
some function is used to check whether any elements of array satisfying given condition or not.
=>it returns true if any elements of array satisfying given condition otherwise it returns false.

var arr=["Ram","Mohan","Rohan","Shyam]
arr.some(function(data,index,ar){
return condition
})

var a=arr.some((data)=>{
return data[0]=="R"
})

reduce
======
reduce function is used to reduce elements of array in single value by applying some functionality.

var arr=[1,2,3,4,5,6,7,89]//trailing comma

Syntax
======
arr.reduce((t,data,index,arr)=>{

})

t=> initial value/ previously return value.

<script>
var arr=[1,2,3,4,5,6,7,89]
var x=arr.reduce((total,data,index,arr)=>{
total=total+data  //6
return total
})
document.write("Sum is : "+x)
</script>
=============

var arr=[1,2,3,4,5,6,7]
alert(arr.slice(1,3))// length=end-start
alert(arr.slice(-5,-3))//3,4 length=end-start

splice()
========
splice function is used to add/remove  element to/from array and return removed element.
=>it updates original array.

var arr=["RAM","MOHAN","SOHAN"]

arr.splice(x,y,items1,item2,item3,....itemN)

x=start
y =>how many element we want to remove  || length 

var arr=["RAM","MOHAN","SOHAN"]
arr.splice(1,1,"SHYAMU")//["RAM","SHYAMU","SOHAN"]


keys
====

var arr=["RAM","MOHAN","SOAHN"]

var x=arr.keys()//[0,1,2]
var y=arr.entries()//
[0,"Ram"]
[1,"Mohan"]
[2,"SOHAN"]

keys()
=====
keys function is used to create array iterator of array key(index).

var arr=["RAM","MOHAN","SOAHN"]

var x=arr.keys()//[0,1,2]

for(var i of x)
{
alert(i)//0,1,2
}

toString
=========
=> toString function is used to convert elements of array into string separeted by comma.

var arr=["RAM","JOHN","MOHIT"]
var x=arr.toString()
document.write(x)
======================
concat
======================
concat function is used to convert (merge) multiple array into one array.

var arr1=[1,2,3,4,5]
var arr2=[10,20,30,40,50]
var arr3=["Ram","Rohan"]
var nArr=arr1.concat(arr2,arr3)//[1,2,3,4,5,10,20,30,40,50,"Ram","Rohan"]
var str=" "
nArr.forEach((data)=>{
str=str+data+"||"
})
document.write(str)

================================
flat()
=====
=>flat function is used to convert multi-dimensional array into single dimensional array.
var arr=["RAM",45,["Lucknow",226022,[1,2]]]
var nArr=arr.flat()
document.write(nArr)//["RAM",45,"Lucknow",226022,1,2]

find()
=====
find function is used to return first element of array that satisfying condition.
syntax
=======
arr.find((x,y,z)=>{
return condition
})

x=>currentValue
y=>index
z=>array

Exa:
===
<script>
var arr=["RAM","MAHAN","JOHN"]
var a=arr.find((data)=>{
return data[1]=="A"
})
document.write(a)//RAM

    </script>

findIndex()
===========
findIndex function is used to return index of first element that satisfying condition.
syntax
=======
arr.findIndex((x,y,z)=>{
return condition
})

x=>currentValue
y=>index
z=>array

var arr=[9,21,34,344,54,65,]
var a=arr.findIndex((data)=>{
return data%2==1 && data%7==0  //
})
document.write(a)
=============
module 
======
module is collection of variable,function and class save to sinlge file.(.js Extension)

every .js extension file is treated like module.

file1.js         location same file1.js file2.js
========
export var a=10
export function demo()
{
alert("ok")
}
export class Test
{
demo1()
{	
}
}

=======
file2.js
=======
import {a,demo,Test} from "./file1.js"

alert(a)
demo()

var obj=new Test()
obj.demo1()

index.html
=========
<script type="module" src="./file2.js"></script>

=====================================
member Aliasing || rename
======================================
import { firstname as f,lastname as l,fun1 as f1,fun2 as f2,test as t } from "./m1.
=============================

Destructuring
============
Destructuring is a process to hold element of array/object into the corresponding variable.


var arr=["RAM",45,40000,"TECHPILE"]
var name=arr[0]
var age=arr[1]
var salary=arr[2]
var cmp=arr[3]

[name,age,salary,cmp]=arr
=================================
object
======
=>object is the collection property(variable) and methods(function).

=> if we want represent a group of value in from of key/value then we have to use object data type.
=>in JavaScript object is denoted {},

Syntax
======
var objectName={key1:value1,key2:value2,.....keyN:valueN}

Exa
----
var studentInfo={name:"ROHAN",age:45,salary:1000000}
=>here value can be duplicate but key can't be duplicate.
=>if we are trying to duplicates key then first value of key will be replace with new value of key.

var obj={1:"RAM",2:"MOHAN",3:"JOHN","a b":"RAM",1:"ROHAN"}

alert(obj[1])//ROHAN

How to access element of object
================================
syntax


objectName[key]//value of key
====================
studentInfo[name]// ROAHN
studentInfo[age]// 45
studentInfo[salary]//1000000

objectName.keyname

studentInfo.name// ROHAN
studentInfo.age //45
studentInfo.salary  //1000000

var obj={1:"RAM",2:"MOHAN",3:"JOHN"}

alert(obj[1])//RAM
alert(obj[2])//MOHAN
alert(obj[3])//JOHN


var obj1={name:"ROHAN",age:34}

How to change value of key
==========================
obj1.name="ROHIT"
console.log(obj1)//{name:"ROHIT",age:34}
How to add new key in a object
=============================
Syntax
------
objectName.key=value
----------------------

obj1.salary=5000000
console.log(obj1)//{name:"ROHIT",age:34,salary:5000000}

obj1.salary=10000000

console.log(obj1)//{name:"ROHIT",age:34,salary:10000000}

===============================
var empInfo={
    name:"ROHAN",
    salary:50000,
    address:{
        city:"Lucknow",
        pincode:226022,
    }

    console.log(
        ``
    )

}

===========================
var obj={
    name:"RAM",
    fun:function()
    {
        console.log("I am from fun key")
    }
}

console.log(`
${obj.name}
${obj.fun}
`)
======================
var obj1={
    City:"Lucknow",
    Pincode:226022
}
var obj={
    Name:"Rahul",
    Age:45,
    Salary:400000
    demo()
    {
    console.log(`
    City : ${obj1.City}
    Pincode : ${obj1.Pincode}
    `)
    }
}
console.log(
`
Name  : ${obj.Name}
Age  : ${obj.Age}
Salary  : ${obj.Salary}
`
)
obj.demo()

=======================
var obj1={
    City:"Lucknow",
    Pincode:226022
}

console.log("Name" in obj1)//false
console.log("City" in obj1)//true
console.log("Pincode" in obj1)//true

hasOwnProperty
===============
hasOwnProperty is used to check whether  given key present in object or not.

it return returns true if given key present in given object otherwise it return false.

var obj1={
    City:"Lucknow",
    Pincode:226022
}

console.log(obj1.hasOwnProperty("propertyName"))
console.log(obj1.hasOwnProperty("Name"))//false
console.log(obj1.hasOwnProperty("City"))//true
============================

var obj={
    Name:"Rahul",
    Age:45,
    Salary:400000,
    }

var arr=[2,3,4,6,7]

for(var i in arr)
{

}
var obj={
    Name:"Rahul",
    Age:45,
    Salary:400000,
}
for(var i in obj)
{
console.log(i)
}

keys()
=====
keys function is used to create an array iterator with key of an object.

var obj1={
1:1,
2:2,
3:45,
}
[1,2,3]

Syntax
=====
var arr=Object.keys(objectName)
Exa:
===
var x=Object.keys(obj1)//[1,2,3]

values
======
var obj1={
1:1,
2:2,
3:45,
}

var arr=Object.values(obj1)//[1,2,45]
for(var i of arr)
{
    console.log(i)
}

==========================
var arr=new Array()
var obj=new Object({Name:"ROHAN",Age:45})

console.log(obj.Name)
console.log(obj.Age)

=========================
Array of Object
===============
it is collection of object.

var arr=[{},{},{},{}......{}]
{}=>{key1:value1,key1:value1.......keyN:valueN}

var studentInfo=[
    {
        Name:"RAM",
        Age:23
        Branch:"CS"
        City:"Lucknow"
    },
    {
        Name:"ROHAN",
        Age:45
        Branch:"IT"
        City:"KANPUR"
    },
    {
        Name:"AMIT",
        Age:25
        Branch:"CS"
        City:"Lucknow"
    },
     {
        Name:"ROHIT",
        Age:34
        Branch:"ME"
        City:"VARANASI"
    },
]

How to access of element of array of Object
------------------------------------------
studentInfo[0].Name//RAM
studentInfo[0][Name]//RAM
studentInfo[0].Age//23
studentInfo[0].Branch//CS
studentInfo[0].City //Lucknow























































































 






























































































<script>
var str="Techpile Technology Pvt. ltd."
//var x=str.match("tech")
var x=str.match(/tech/)//null
var x=str.match(/tech/i)//Tech
var x=str.match(/tech/ig)//Tech,Tech
document.write(x)
</script>


























replace
replaceAll
concat
match
includes
split
etc.

ASCII VALUE OF CHARACTER  // UNICODE VALUE
ASCII Stands for American Standard Code for Information interchange.

A-Z  => 65-90
a-z =>  97-122
space => 32
0-9  => 48 -57
===============
charCodeAt
===============
charCodeAt function is used to return Unicode(ASCII Value) value at specified index.

var str="ABCabc0123"
alert(str.charAt(0))//A
alert(str.charCodeAt(0))//65
alert(str.charCodeAt(3))//97
alert(str.charCodeAt(5))//99
alert(str.charCodeAt(str.length))//Null

indexOf
=======
=>indexOf function is used to return index of first occurrence of character in a string.
=>it returns -1 if character is not present in given string.

Syntax
=======
var str="TECHPILE TECHnology"
//document.write(str.indexOf("T"))//0
//document.write(str.indexOf("Te"))//-1
//document.write(str.indexOf("z"))//-1
document.write(str.indexOf("TECH")+"<br/>")//0
document.write(str.indexOf("TECH",3))//9
document.write(str.indexOf("tech",3))//-1
document.write(str.indexOf("TECH",10))//-1


lastIndexOf()
=============
lastIndexOf function is used to return index of last occurrence character in a given string.

=>it return -1 if character not present in given string.
<script>
var str="Techpile Technology"
alert(str.lastIndexOf("T"))//9
alert(str.lastIndexOf("o"))//16
</script>

search
=======
=> search function is used to return index of first occurrence of regular expression in string.

=>By Default it searches in case sensitive mode.
=> if we want search case-insensitive mode the we have to use i flag with regular expression.
=>it returns -1 if regular expression is not present string.

var str="Techpile"
alert(str.indexOf("T"))//0
alert(str.indexOf("t"))//-1
alert(str.search("T"))//0
alert(str.search("t"))//-1
alert(str.search(/t/))// Case-sensitive  // -1
alert(str.search(/t/i))// Case-insensitive //0 



































	




	
			

			
			




































getAttribute
removeAttribute
hasAttribute
hasAttributes
==================================



























































